{"version":3,"file":"static/js/148.deb10c7c.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","pages/CastPage.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastsList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 50px 80px 90px;\n`;\n\nexport const Item = styled.li`\npadding:10px;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items:center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    &:hover {\n      transform: scale(1.03);\n      cursor: zoom-in;\n`;\n\nexport const Photo = styled.img``;\n\nexport const ActorName = styled.h3`\n  margin-top: 10px;\n  font-size: 15px;\n  font-weight: 500;\n  color: #000000d1;\n`;\n\nexport const NoInformationText = styled.p`\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  font-weight: 500;\n`;\n","import propTypes from 'prop-types';\nimport defaultImg from '../../images/defaultImg.jpg';\nimport { CastsList, Item, Photo, ActorName } from './Cast.styled';\n\nexport default function Cast({ cast }) {\n  return (\n    <>\n      <CastsList>\n        {cast.map(({ id, name, photo }) => (\n          <Item key={id}>\n            {photo ? (\n              <Photo\n                src={`https://image.tmdb.org/t/p/w300/${photo}`}\n                alt={name}\n              />\n            ) : (\n              <img src={defaultImg} alt={name} width={300} height={450} />\n            )}\n\n            <ActorName>{name}</ActorName>\n          </Item>\n        ))}\n      </CastsList>\n    </>\n  );\n}\nCast.propTypes = {\n  cast: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      name: propTypes.string,\n      photo: propTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport Cast from 'components/Cast/Cast';\nimport { NoInformationText } from 'components/Cast/Cast.styled';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(r => {\n      const mappedActors = [];\n      r.cast.map(({ id, original_name, profile_path }) => {\n        const actor = {\n          id: id,\n          name: original_name,\n          photo: profile_path,\n        };\n        return mappedActors.push(actor);\n      });\n      setCast(mappedActors);\n    });\n  }, [movieId]);\n  console.log(cast);\n\n  return cast && cast.length > 0 ? (\n    <Cast cast={cast} />\n  ) : (\n    <NoInformationText>Sorry, we have no information here</NoInformationText>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07e84016aeec599a5623106dff9619bb';\n\nasync function fetchMoviesBySearch(query) {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`;\n  return await axios.get(`${url}`).then(response => response.data);\n}\n\nasync function fetchTrendingMovies() {\n  const trendingURL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${1}`;\n  return await axios.get(`${trendingURL}`).then(response => response.data);\n}\n\nasync function fetchMovieDetails(movieId) {\n  const detailsURL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n  return await axios.get(`${detailsURL}`).then(response => response.data);\n}\n\nasync function fetchMovieCast(movieId) {\n  const castURL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n  return await axios.get(`${castURL}`).then(response => response.data);\n}\n\nasync function fetchMoviesReviews(movieId) {\n  const reviewsURL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  return await axios.get(`${reviewsURL}`).then(response => response.data);\n}\n\nexport {\n  fetchMoviesBySearch,\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMoviesReviews,\n};\n\n// export const fetchAPI = async (search, page) => {\n//   const URL = 'https://pixabay.com/api/';\n//   const options = {\n//     params: {\n//       key: '25212904-bc289a80479625a5a070d2ccf',\n//       q: search,\n//       image_type: 'photo',\n//       orientation: 'horizontal',\n//       safesearch: true,\n//       page: page,\n//       per_page: 12,\n//     },\n//   };\n\n//   const response = await axios.get(URL, options);\n//   const mappedImages = response.data.hits.map(\n//     ({ id, largeImageURL, webformatURL }) => ({\n//       id,\n//       largeImageURL,\n//       webformatURL,\n//     })\n//   );\n\n//   if (response.data.total === 0) {\n//     return Promise.reject(new Error('Something get wrong!'));\n//   }\n//   return mappedImages;\n// };\n"],"names":["CastsList","styled","Item","Photo","ActorName","NoInformationText","Cast","cast","map","id","name","photo","src","alt","defaultImg","width","height","CastPage","movieId","useParams","useState","setCast","useEffect","fetchMovieCast","then","r","mappedActors","actor","original_name","profile_path","push","console","log","length","BASE_URL","API_KEY","fetchMoviesBySearch","query","url","axios","response","data","fetchTrendingMovies","trendingURL","fetchMovieDetails","detailsURL","castURL","fetchMoviesReviews","reviewsURL"],"sourceRoot":""}