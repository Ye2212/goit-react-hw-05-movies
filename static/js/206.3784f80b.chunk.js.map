{"version":3,"file":"static/js/206.3784f80b.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesListItem/MoviesListItem.styled.jsx","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage.js","services/api.js","utils/mapper.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  min-height: 100vh;\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 50px 80px 50px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\npadding:10px;\n  border-radius: 2px;\n  display: flex;\n  justify-content: center;\n  align-items:center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    &:hover {\n      transform: scale(1.03);\n      cursor: zoom-in;\n`;\nexport const Info = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n`;\nexport const Image = styled.img`\n  width: 300px;\n  height: 440px;\n  margin-bottom: 10px;\n  @media (min-width: 768px) {\n    width: 350px;\n  }\n  object-fit: cover;\n  }\n`;\nexport const Title = styled.h2`\n  font-size: 12px;\n  font-weight: 700;\n  color: #000000d1;\n  // margin-bottom: 15px;\n`;\nexport const Vote = styled.p`\n  font-size: 12px;\n  font-weight: 700;\n  color: #000000d1;\n`;\n","import propTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Item, Info, Image, Title, Vote } from './MoviesListItem.styled';\n\nfunction MoviesListItem({ id, title, poster, vote }) {\n  const location = useLocation();\n  // console.log(location);\n\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <Info>\n          <Title>{title ? title : 'No Title'}</Title>\n          <Vote>Vote: {vote}</Vote>\n        </Info>\n\n        <Image\n          src={\n            poster ? `https://image.tmdb.org/t/p/w500/${poster}` : 'No Poster'\n          }\n          alt={title}\n        />\n      </Link>\n    </Item>\n  );\n}\nMoviesListItem.propTypes = {\n  id: propTypes.number.isRequired,\n  title: propTypes.string.isRequired,\n  poster: propTypes.string.isRequired,\n  vote: propTypes.number.isRequired,\n};\nexport default MoviesListItem;\n","import propTypes from 'prop-types';\nimport { List } from './MoviesList.styled';\nimport MoviesListItem from 'components/MoviesListItem/MoviesListItem';\n\nfunction MoviesList({ movies }) {\n  return (\n    <List>\n      {movies.map(({ id, original_title, poster_path, vote_average }) => {\n        return (\n          <MoviesListItem\n            key={id}\n            id={id}\n            title={original_title}\n            poster={poster_path}\n            vote={vote_average}\n          />\n        );\n      })}\n    </List>\n  );\n}\nMoviesList.propTypes = {\n  movies: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.number.isRequired,\n      original_title: propTypes.string.isRequired,\n      poster_path: propTypes.string.isRequired,\n      vote_average: propTypes.number.isRequired,\n    })\n  ),\n};\nexport default MoviesList;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'services/api';\nimport { mapper } from 'utils/mapper';\n\nexport default function HomePage() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetchTrendingMovies().then(movies => {\n      const mappedMovies = mapper(movies.results);\n      setMovies(mappedMovies);\n    });\n  }, []);\n  // console.log(movies);\n  return movies && <MoviesList movies={movies} />;\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07e84016aeec599a5623106dff9619bb';\n\nasync function fetchMoviesBySearch(query) {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`;\n  return await axios.get(`${url}`).then(response => response.data);\n}\n\nasync function fetchTrendingMovies() {\n  const trendingURL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${1}`;\n  return await axios.get(`${trendingURL}`).then(response => response.data);\n}\n\nasync function fetchMovieDetails(movieId) {\n  const detailsURL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n  return await axios.get(`${detailsURL}`).then(response => response.data);\n}\n\nasync function fetchMovieCast(movieId) {\n  const castURL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n  return await axios.get(`${castURL}`).then(response => response.data);\n}\n\nasync function fetchMoviesReviews(movieId) {\n  const reviewsURL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  return await axios.get(`${reviewsURL}`).then(response => response.data);\n}\n\nexport {\n  fetchMoviesBySearch,\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMoviesReviews,\n};\n\n// export const fetchAPI = async (search, page) => {\n//   const URL = 'https://pixabay.com/api/';\n//   const options = {\n//     params: {\n//       key: '25212904-bc289a80479625a5a070d2ccf',\n//       q: search,\n//       image_type: 'photo',\n//       orientation: 'horizontal',\n//       safesearch: true,\n//       page: page,\n//       per_page: 12,\n//     },\n//   };\n\n//   const response = await axios.get(URL, options);\n//   const mappedImages = response.data.hits.map(\n//     ({ id, largeImageURL, webformatURL }) => ({\n//       id,\n//       largeImageURL,\n//       webformatURL,\n//     })\n//   );\n\n//   if (response.data.total === 0) {\n//     return Promise.reject(new Error('Something get wrong!'));\n//   }\n//   return mappedImages;\n// };\n","export const mapper = data => {\n  // console.log(data);\n  return data.map(({ poster_path, id, original_title, vote_average }) => ({\n    poster_path,\n    id,\n    original_title,\n    vote_average,\n  }));\n};\n"],"names":["List","styled","Item","Info","Image","Title","Vote","id","title","poster","vote","location","useLocation","to","state","from","src","alt","movies","map","original_title","poster_path","vote_average","HomePage","useState","setMovies","useEffect","fetchTrendingMovies","then","mappedMovies","mapper","results","BASE_URL","API_KEY","fetchMoviesBySearch","query","url","axios","response","data","trendingURL","fetchMovieDetails","movieId","detailsURL","fetchMovieCast","castURL","fetchMoviesReviews","reviewsURL"],"sourceRoot":""}